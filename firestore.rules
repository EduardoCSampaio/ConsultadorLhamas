/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles and restricts webhook response access.
 * All user data is stored under `/users/{userId}`, and access is granted only to the authenticated user with a matching `uid`.
 * Webhook responses are publicly readable but only writeable by an admin.
 *
 * @dataStructure
 * - `/users/{userId}`: Stores user profile information, where `userId` matches the Firebase Auth UID.
 * - `/webhookResponses/{webhookResponseId}`: Stores responses from webhooks.
 *
 * @keySecurityDecisions
 * - User profiles are only accessible and modifiable by the authenticated user.
 * - Listing of user profiles is disallowed for privacy.
 * - Webhook responses are publicly readable, but creation, update, and deletion are denied.
 * - Roles are denormalized directly onto the user profile document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the authenticated user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' creates their profile: `auth.uid == 'user_abc'` and `request.resource.data.uid == 'user_abc'`
     * @allow (get, update, delete) - User 'user_abc' reads/updates/deletes their profile: `auth.uid == 'user_abc'` and `resource.data.uid == 'user_abc'`
     * @deny (create) - User 'user_xyz' attempts to create profile for 'user_abc': `auth.uid == 'user_xyz'` and `request.resource.data.uid == 'user_abc'`
     * @deny (get, update, delete) - User 'user_xyz' attempts to read/update/delete profile for 'user_abc': `auth.uid == 'user_xyz'` and `resource.data.uid == 'user_abc'`
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to webhook responses. Allows public read access but restricts writes.
     * @path /webhookResponses/{webhookResponseId}
     * @allow (get, list) - Any user can read webhook responses.
     * @deny (create, update, delete) - All write requests are denied.
     * @principle Provides public read access while restricting writes to webhook responses.
     */
    match /webhookResponses/{webhookResponseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}