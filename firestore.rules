/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to webhook responses while restricting write access to authorized users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /webhookResponses/{webhookResponseId}: Stores webhook responses, accessible for public reading.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the corresponding user; only the authenticated user can read/write their own profile.
 * - Webhook responses are publicly readable but only writeable by authenticated users (TODO: implement specific logic).
 * - Listing of users is disallowed to protect user privacy and prevent enumeration attacks.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` includes the Firebase Auth UID to easily enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile.
     *          Request: auth.uid = "user123", resource.data.uid = "user123"
     * @allow (get, update, delete) Authenticated user reads, updates, or deletes their own profile.
     *          Request: auth.uid = "user123", path = "/databases/(default)/documents/users/user123"
     * @deny (create) User attempts to create a profile with a mismatched user ID.
     *         Request: auth.uid = "user456", resource.data.uid = "user123"
     * @deny (get, update, delete) User attempts to access another user's profile.
     *         Request: auth.uid = "user456", path = "/databases/(default)/documents/users/user123"
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      // Listing users is not permitted to protect user privacy.
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures webhook responses, allowing public read access while restricting write access.
     * @path /webhookResponses/{webhookResponseId}
     * @allow (get, list) Any user can read webhook responses.
     * @deny (create, update, delete) Only authenticated users can modify webhook responses (TODO: implement specific logic).
     * @principle Allows public read access with restricted write access.
     */
    match /webhookResponses/{webhookResponseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}