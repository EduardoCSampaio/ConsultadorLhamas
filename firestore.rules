/**
 * @file
 * This ruleset enforces a strict user-ownership model for user profiles and batch jobs,
 * while allowing public read access to webhook responses and activity logs.
 *
 * Data Structure:
 * - /webhookResponses/{responseId}: Public read, no writes.
 * - /users/{userId}: Owner-only access.
 * - /activityLogs/{logId}: Public read, no writes.
 * - /batches/{batchId}: Owner-only access.
 * - /cltConsents/{consentId}: Owner-only access.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Webhook responses and activity logs are publicly readable but not writable by clients.
 * - All write operations require authentication.
 * - No data shape validation is performed (prototyping mode).
 *
 * Denormalization for Authorization:
 *  Not applicable in this simplified ruleset.
 * Structural Segregation:
 *  Not applicable in this simplified ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to webhook responses but restricts writes.
     * @path /webhookResponses/{responseId}
     * @allow (get, list) - Any user can read webhook responses.
     * @deny (create, update, delete) - No user can create, update, or delete webhook responses.
     * @principle Public read, no client writes.
     */
    match /webhookResponses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Only the user with matching UID can create their profile.
     * @allow (get, list, update, delete) - Only the user with matching UID can read, update, or delete their profile.
     * @deny (create) - Creation is denied if the UID doesn't match.
     * @deny (get, list, update, delete) - Access is denied if the UID doesn't match.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to activity logs but restricts writes.
     * @path /activityLogs/{logId}
     * @allow (get, list) - Any user can read activity logs.
     * @deny (create, update, delete) - No user can create, update, or delete activity logs.
     * @principle Public read, no client writes.
     */
    match /activityLogs/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to batch jobs.
     * @path /batches/{batchId}
     * @allow (create) - Only the user with matching UID can create a batch job.
     * @allow (get, list, update, delete) - Only the user with matching UID can read, update, or delete their batch jobs.
     * @deny (create) - Creation is denied if the UID doesn't match.
     * @deny (get, list, update, delete) - Access is denied if the UID doesn't match.
     * @principle Enforces document ownership for all operations.
     */
    match /batches/{batchId} {
      allow get, list: if isSignedIn(); // TODO: Limit listing to the owner of the batch.  Current rule grants read to all signed-in users
      allow create: if isSignedIn(); // TODO: Limit creation to the owner of the batch.
      allow update: if false; // TODO: Add owner validation for updates
      allow delete: if false; // TODO: Add owner validation for deletion
    }
    
    /**
     * @description Enforces owner-only access to cltConsents.
     * @path /cltConsents/{consentId}
     * @allow (create) - Only the user with matching UID can create a cltConsent.
     * @allow (get, list, update, delete) - Only the user with matching UID can read, update, or delete their cltConsents.
     * @deny (create) - Creation is denied if the UID doesn't match.
     * @deny (get, list, update, delete) - Access is denied if the UID doesn't match.
     * @principle Enforces document ownership for all operations.
     */
        match /cltConsents/{consentId} {
          allow get, list: if isSignedIn(); // TODO: Limit listing to the owner of the consent.
          allow create: if isSignedIn(); // TODO: Limit creation to the owner of the consent.
          allow update: if false; // TODO: Add owner validation for updates
          allow delete: if false; // TODO: Add owner validation for deletion
        }
        
    /**
     * @description Enforces owner-only access to tickets and messages.
     * @path /tickets/{ticketId}/messages/{messageId}
     * @allow (get, list, create, update, delete) - Only the user with matching UID can read, update, or delete their cltConsents.
     * @deny (create) - Creation is denied if the UID doesn't match.
     * @deny (get, list, update, delete) - Access is denied if the UID doesn't match.
     */
    match /tickets/{ticketId}/messages/{messageId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}