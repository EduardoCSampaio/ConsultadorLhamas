/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data, with additional role-based access for administrative functions.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Team data is stored under `/teams/{teamId}`.
 * - Activity logs are stored under `/activityLogs/{logId}`.
 * - Batch job status is stored under `/batches/{batchId}`.
 * - CLT consent records are stored under `/cltConsents/{consentId}`.
 * - Support tickets are stored under `/tickets/{ticketId}`.
 * - Ticket messages are stored as subcollections under `/tickets/{ticketId}/messages/{messageId}`.
 * - User-specific notifications are stored under `/users/{userId}/notifications/{notificationId}`.
 * - Webhook responses are stored under `/webhookResponses/{responseId}`.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed except where explicitly required and secured by role checks.
 * - All write operations are protected by authorization checks.
 * - Data validation is relaxed in this prototyping phase except for ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `/users/{userId}` document to avoid costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @principle Verified Identity
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @principle Ownership
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID and the document's owner ID.
     * @principle Ownership and Existence Check
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to API response data based on admin roles.
     * @path /webhookResponses/{responseId}
     * @allow (get, list) if user is admin
     * @deny (create, update, delete) always
     * @principle Admin role access
     */
    match /webhookResponses/{responseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile access, allowing users to read and update their own profiles, but restricting other access.
     * @path /users/{userId}
     * @allow (get, list) if the requested userId is the same as the authenticated user's ID (get), or deny listing (list).
     * @allow (create) if the requested userId is the same as the authenticated user's ID and the profile data is valid.
     * @allow (update, delete) if the requested userId is the same as the authenticated user's ID and the profile exists.
     * @deny  (create) if the requested userId is different from the authenticated user's ID.
     * @deny  (update, delete) if the requested userId is different from the authenticated user's ID or the profile does not exist.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to team data, allowing managers to manage their teams.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Controls access to activity logs, allowing admins to read logs, but restricting write access.
     * @path /activityLogs/{logId}
     */
    match /activityLogs/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to batch job status, allowing users to read and update their own batch job statuses.
     * @path /batches/{batchId}
     */
    match /batches/{batchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages access to CLT consent terms, allowing users to read and create their own consent terms.
     * @path /cltConsents/{consentId}
     */
    match /cltConsents/{consentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages access to support tickets, allowing users to create, read, and update their own tickets.
     * @path /tickets/{ticketId}
     */
    match /tickets/{ticketId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages access to ticket messages within a support ticket.
     * @path /tickets/{ticketId}/messages/{messageId}
     */
    match /tickets/{ticketId}/messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages user-specific notifications, allowing users to access their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, list) if the requested userId is the same as the authenticated user's ID.
     * @allow (create) if the requested userId is the same as the authenticated user's ID.
     * @allow (update, delete) if the requested userId is the same as the authenticated user's ID and the notification exists.
     * @deny (create, update, delete) if the requested userId is different from the authenticated user's ID or the notification does not exist.
     * @principle Enforces user-specific access for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}