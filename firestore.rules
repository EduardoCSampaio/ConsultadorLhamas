/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control system with user-owned profiles and public webhook responses.
 *
 * Core Philosophy:
 *   - Users can only manage their own profiles.
 *   - Webhook responses are publicly readable but only writeable with proper authorization.
 *
 * Data Structure:
 *   - User profiles are stored under `/users/{userId}`, where `userId` matches the Firebase Auth UID.
 *   - Webhook responses are stored under `/webhookResponses/{webhookResponseId}`.
 *
 * Key Security Decisions:
 *   - Listing of user profiles is disallowed for privacy.
 *   - User profile creation is allowed via "Self-Creation" but only if the Firebase Auth UID matches the document ID.
 *
 * Denormalization for Authorization:
 *   - Webhook responses do not contain ownership data. Write access will be controlled by a pre-defined admin role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/otherUser.
     * @deny (update) User with UID 'user123' cannot update profile at /users/otherUser.
     * @principle Enforces user ownership and restricts modifications to the owner.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile if the userId matches their auth.uid
      allow create: if request.auth.uid == userId;

      // Allow a user to get their own profile.
      allow get: if isOwner(userId);

      // Disallow listing all user profiles (privacy).
      allow list: if false;

      // Allow a user to update their own profile
      allow update: if isOwner(userId);

      // Allow a user to delete their own profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to webhook responses.
     * @path /webhookResponses/{webhookResponseId}
     * @allow (get) Any user can read a webhook response.
     * @allow (list) Any user can list webhook responses.
     * @deny (create) No one can create a webhook response without authorization logic.
     * @deny (update) No one can update a webhook response without authorization logic.
     * @principle Public read access with restricted write access via role.
     */
    match /webhookResponses/{webhookResponseId} {
      // Allow anyone to read webhook responses.
      allow get, list: if true;

      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if false;
    }
  }
}