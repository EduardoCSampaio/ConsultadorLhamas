/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and activity logs,
 *              while also providing controlled access to webhook responses and batch job statuses.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user themselves or an admin.
 * - /activityLogs/{logId}: Activity logs, writeable by the server, readable only by admins.
 * - /webhookResponses/{responseId}: Webhook responses, writeable only by the server, readable by admins.
 * - /batches/{batchId}: Batch job statuses, writeable by the server, readable only by the associated user or admins.
 * - /cltConsents/{consentId}: CLT consent documents, writeable by the client during consent generation and readable by the same user.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and owned by the user. Listing all users is disallowed.
 * - Activity logs are append-only and readable only by admins.
 * - Webhook responses are append-only and readable only by admins.
 * - Batch job statuses are readable by the initiating user and admins.
 * - CLT consents are generated by the user and can be read by the same user.
 *
 * Denormalization for Authorization:
 * - User profile documents include the Firebase Auth UID, simplifying ownership checks.
 * - Activity log entries include the user's UID and email for auditing.
 * - Batch job documents include the user's UID for identifying the job owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' custom claim.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Secures user profiles. Only the user themselves or an admin can read/write their profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read, update, or delete their own profile at /users/user123.
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123, provided the UID matches.
     * @allow (get, update, delete) Admin user can read, update, or delete any user profile.
     * @deny (get, update, delete) User with UID 'user123' cannot read, update, or delete the profile of another user at /users/user456.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456.
     * @deny (list) Listing all user profiles is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Secures activity logs. Only admins can read activity logs. Writes are performed by the server.
     * @path /activityLogs/{logId}
     * @allow (get, list) Admin user can read any activity log.
     * @deny (get, list) Non-admin user cannot read any activity log.
     * @deny (create, update, delete) No client-side creation, updates, or deletions of activity logs.
     * @principle Enforces admin-only access for reading activity logs.
     */
    match /activityLogs/{logId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if false;
    }

    /**
     * @description Secures webhook responses. Only admins can read webhook responses. Writes are performed by the server.
     * @path /webhookResponses/{responseId}
     * @allow (get, list) Admin user can read any webhook response.
     * @deny (get, list) Non-admin user cannot read any webhook response.
     * @deny (create, update, delete) No client-side creation, updates, or deletions of webhook responses.
     * @principle Enforces admin-only access for reading webhook responses.
     */
    match /webhookResponses/{responseId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if false;
    }

    /**
     * @description Secures batch job statuses. Only the initiating user or an admin can read the status. Writes are performed by the server.
     * @path /batches/{batchId}
     * @allow (get, list) User with UID 'user123' can read the batch job status if batch document has userId 'user123'.
     * @allow (get, list) Admin user can read any batch job status.
     * @deny (get, list) Non-admin user cannot read a batch job status if they are not the initiating user.
     * @deny (create, update, delete) No client-side creation, updates, or deletions of batch job statuses.
     * @principle Enforces access control based on user ownership and admin privileges for batch jobs.
     */
    match /batches/{batchId} {
      allow get, list: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();
      allow create, update, delete: if false;
    }

    /**
     * @description Secures CLT consent documents. Only the creating user can read and the writes are performed by the client.
     * @path /cltConsents/{consentId}
     * @allow (get) User can read their own consent document.
     * @allow (create) User can create a consent document where userId matches their own.
     * @deny (get) User cannot read another user's consent document.
     * @deny (create) User cannot create a consent document for another user.
     * @deny (update, delete) No client-side updates or deletions of consent documents.
     * @principle Enforces user-specific access to consent documents.
     */
    match /cltConsents/{consentId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
    
     /**
     * @description Tickets collection access control.
     * @path /tickets/{ticketId}
     * @allow get, list: if false;
     * @allow create, update, delete: if false;
     * @principle Denies all access by default for security.
     */
    match /tickets/{ticketId} {
        allow get, list, create, update, delete: if false;
    }
  }
}