/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user identity and roles
 * while remaining flexible regarding data validation to accelerate prototyping.
 * It enforces ownership for user-specific data and provides role-based access control
 * where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /webhookResponses/{webhookResponseId}: Stores webhook responses, accessible to authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Listing all users is denied to prevent information disclosure.
 * - Webhook responses are accessible to all authenticated users.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the /users/{userId} document to simplify role checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description User profile access rules.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile with a different ID.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (get, update, delete) Authenticated user cannot access other user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Webhook responses access rules.
     * @path /webhookResponses/{webhookResponseId}
     * @allow (get, list) Any authenticated user can read webhook responses.
     * @allow (create) Any authenticated user can create webhook responses.
     * @allow (update, delete) No one can update or delete webhook responses.
     * @principle Allows public read access to webhook responses with restricted write access.
     */
    match /webhookResponses/{webhookResponseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}