/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and adopts a public read, owner-write pattern for webhook responses and activity logs.
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /webhookResponses/{responseId}: API response data, publicly readable but only writable by authenticated users.
 * - /activityLogs/{logId}: Logs of user actions, publicly readable but only writable by authenticated users.
 * - /batches/{batchId}: Batch job status and progress, publicly readable but only writable by authenticated users.
 * - /cltConsents/{consentId}: CLT consent terms, publicly readable but only writable by authenticated users.
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Webhook responses and activity logs are publicly readable to facilitate reporting and analysis.
 * - Listing of users is disallowed to prevent enumeration.
 * - Data validation is relaxed to allow for rapid prototyping but critical ownership fields are validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the resource.
     * @param {string} userId - The user ID to compare with the resource's data and the request's authentication UID.
     * @return {boolean} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Rules for the /webhookResponses collection.
     * @path /webhookResponses/{responseId}
     * @allow (get, list): Any user can read webhook responses.
     * @allow (create): Any authenticated user can create webhook responses.
     * @allow (update, delete): Only the user who created the response can modify or delete it.
     * @deny (create): An unauthenticated user cannot create webhook responses.
     * @deny (update): An unauthenticated user cannot update webhook responses.
     * @deny (delete): An unauthenticated user cannot delete webhook responses.
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /webhookResponses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get, list): Only the user with the matching userId can access their profile.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @allow (update, delete): Only the user with the matching userId can update or delete their profile.
     * @deny (create): A user cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (update): A user cannot update a profile if the userId doesn't match their auth UID.
     * @deny (delete): A user cannot delete a profile if the userId doesn't match their auth UID.
     * @principle Enforces strict user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /activityLogs collection.
     * @path /activityLogs/{logId}
     * @allow (get, list): Any user can read activity logs.
     * @allow (create): Any authenticated user can create activity logs.
     * @allow (update, delete): Only the user who created the log can modify or delete it.
     * @deny (create): An unauthenticated user cannot create activity logs.
     * @deny (update): An unauthenticated user cannot update activity logs.
     * @deny (delete): An unauthenticated user cannot delete activity logs.
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /activityLogs/{logId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /batches collection.
     * @path /batches/{batchId}
     * @allow (get, list): Any user can read batch job status.
     * @allow (create): Any authenticated user can create batch jobs.
     * @allow (update, delete): Only the user who created the batch job can modify or delete it.
     * @deny (create): An unauthenticated user cannot create batch jobs.
     * @deny (update): An unauthenticated user cannot update batch jobs.
     * @deny (delete): An unauthenticated user cannot delete batch jobs.
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /batches/{batchId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /cltConsents collection.
     * @path /cltConsents/{consentId}
     * @allow (get, list): Any user can read CLT consent terms.
     * @allow (create): Any authenticated user can create CLT consent terms.
     * @allow (update, delete): Only the user who created the consent term can modify or delete it.
     * @deny (create): An unauthenticated user cannot create CLT consent terms.
     * @deny (update): An unauthenticated user cannot update CLT consent terms.
     * @deny (delete): An unauthenticated user cannot delete CLT consent terms.
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /cltConsents/{consentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /tickets/{ticketId}/messages collection.
     * @path /tickets/{ticketId}/messages/{messageId}
     * @allow (get, list): Authenticated user can read messages.
     * @allow (create): Any authenticated user can create messages.
     * @allow (update, delete): Only the user who created the message can modify or delete it.
     * @deny (create): An unauthenticated user cannot create messages.
     * @deny (update): An unauthenticated user cannot update messages.
     * @deny (delete): An unauthenticated user cannot delete messages.
     */
    match /tickets/{ticketId}/messages/{messageId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}