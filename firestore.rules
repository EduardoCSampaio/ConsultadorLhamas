/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with user-owned data and administrative overrides.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /teams/{teamId}: Stores team information, including roles and permissions.
 * - /activityLogs/{logId}: Stores records of user activities.
 * - /batches/{batchId}: Stores the state of batch processing jobs.
 * - /cltConsents/{consentId}: Stores CLT consent terms.
 * - /tickets/{ticketId}: Stores user support tickets.
 * - /tickets/{ticketId}/messages/{messageId}: Stores messages related to support tickets.
 * - /webhookResponses/{responseId}: Stores API responses from webhooks.
 * - /users/{userId}/notifications/{notificationId}: Stores in-app notifications.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Listing the /users collection is denied to prevent information disclosure.
 * - Teams can only be created, modified and deleted by a managerId.
 * - Only authenticated users can create tickets.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` includes a `role` field to avoid additional reads for authorization.
 * - The `Team` includes a `managerId` field to define the owner of the team.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is a super admin.
     */
    function isSuperAdmin() {
        return isSignedIn() && (request.auth.token.super_admin == true);
    }

    /**
     * @description Checks if the user is a manager
     */
    function isManager() {
        return isSignedIn() && (request.auth.token.admin == true);
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the document's ownerId.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Enforces role-based access control to the /users collection.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their UID.
     * @allow (get, update, delete) - A user can get, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile with a different userId.
     * @deny (update) - A user cannot modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores API responses. The responseId can be a CPF for V8, or a provider-prefixed ID for others.
     * @path /webhookResponses/{responseId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Only super admins can create new webhook responses.
     * @allow (update, delete) - Only super admins can update or delete webhook responses.
     * @deny (create) - Non-admins cannot create webhook responses.
     * @deny (update, delete) - Non-admins cannot update or delete webhook responses.
     * @principle Allows public read access with restricted write access.
     */
    match /webhookResponses/{responseId} {
        allow get, list: if true;
        allow create: if isSuperAdmin();
        allow update: if isSuperAdmin() && resource != null;
        allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Stores team information, including sectors and permissions.
     * @path /teams/{teamId}
     * @allow (get, list) - Only super admins can view all teams.
     * @allow (create) - Only managers or super admins can create teams.
     * @allow (update, delete) - Only the team manager or a super admin can modify or delete a team.
     * @deny (create) - Non-managers and non-super admins cannot create teams.
     * @deny (update, delete) - Users who are not the manager or a super admin cannot modify or delete a team.
     * @principle Restricts team management to managers and super admins.
     */
    match /teams/{teamId} {
      allow get, list: if isSuperAdmin() || isManager();
      allow create: if (isManager() || isSuperAdmin());
      allow update: if (isExistingOwner(resource.data.managerId) || isSuperAdmin());
      allow delete: if (isExistingOwner(resource.data.managerId) || isSuperAdmin());
    }

    /**
     * @description Stores records of user activities for auditing and dashboard metrics.
     * @path /activityLogs/{logId}
     * @allow (get, list) - Only super admins can view activity logs.
     * @allow (create) - Only authenticated users can create activity logs.
     * @deny (create) - Non-authenticated users cannot create activity logs.
     * @deny (update, delete) - No one can update or delete activity logs.
     * @principle Restricts activity log access to admins and allows creation by authenticated users.
     */
    match /activityLogs/{logId} {
      allow get, list: if isSuperAdmin() || isManager();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Stores the state and progress of a batch processing job.
     * @path /batches/{batchId}
     * @allow (get, list) - Only super admins can view all batch jobs.
     * @allow (create) - Only authenticated users can create batch jobs. The userId field must match the authenticated user's UID.
     * @allow (update) - Only the owner or a super admin can update the batch job.
     * @deny (update) - Regular users cannot modify batch jobs that do not belong to them.
     * @deny (delete) - No one can delete batch jobs.
     * @principle Enforces ownership for batch job updates, allows admin oversight.
     */
    match /batches/{batchId} {
      allow get, list: if isSuperAdmin() || isManager();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if (isExistingOwner(resource.data.userId) || isSuperAdmin());
      allow delete: if false;
    }

    /**
     * @description Stores generated CLT consent terms.
     * @path /cltConsents/{consentId}
     * @allow (get, list) - Only super admins can view all consents.
     * @allow (create) - Only authenticated users can create CLT consents. The userId field must match the authenticated user's UID.
     * @allow (update) - No one can update CLT consents after creation.
     * @deny (delete) - No one can delete CLT consents.
     * @principle Allows consent creation by users, read access to super admins, and prevents modification.
     */
    match /cltConsents/{consentId} {
      allow get, list: if isSuperAdmin() || isManager();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Stores support tickets created by users.
     * @path /tickets/{ticketId}
     * @allow (get) - Any authenticated user can get a ticket if they are the owner or an admin.
     * @allow (list) - Any authenticated user can list tickets.
     * @allow (create) - Only authenticated users can create tickets.
     * @allow (update) - Only super admins can update tickets.
     * @deny (delete) - No one can delete tickets.
     * @principle  Restricts modifications but allows reading by authorized users and admins.
     */
    match /tickets/{ticketId} {
      allow get: if isSignedIn() && (isSuperAdmin() || isOwner(resource.data.userId));
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Stores all messages related to a specific support ticket.
     * @path /tickets/{ticketId}/messages/{messageId}
     * @allow (get) - Any authenticated user can get a message if they are the ticket owner or an admin.
     * @allow (list) - Any authenticated user can list messages within a ticket if they are the ticket owner or an admin.
     * @allow (create) - Only authenticated users can create messages within a ticket.
     * @deny (update, delete) - No one can update or delete messages.
     * @principle Enforces ticket ownership for message access and allows message creation by authenticated users.
     */
    match /tickets/{ticketId}/messages/{messageId} {
      allow get: if isSignedIn() && (isSuperAdmin() || get(/databases/$(database)/documents/tickets/$(request.params.ticketId)).data.userId == request.auth.uid);
      allow list: if isSignedIn() && (isSuperAdmin() || get(/databases/$(database)/documents/tickets/$(request.params.ticketId)).data.userId == request.auth.uid);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/tickets/$(request.params.ticketId)).data.userId != null;
      allow update, delete: if false;
    }

    /**
     * @description Stores notifications for a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get, list) - Only the owner can get/list notifications.
     * @allow (create) - Only the owner can create notifications.
     * @deny (update, delete) - No one can update or delete notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if false;
    }
  }
}