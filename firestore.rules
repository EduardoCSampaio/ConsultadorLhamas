/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * allowing only the authenticated user to read and write their own profile data.
 * Webhook responses are publicly readable but only writeable by a privileged process (e.g., backend).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with userId matching the Firebase Auth UID.
 * - /webhookResponses/{webhookResponseId}: Stores webhook responses, accessible to all for reading.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - User profile creation is restricted to self-creation (a user can only create their own profile).
 * - Webhook responses are publicly readable to allow client-side monitoring of webhook status.
 *   Write access to webhook responses is not yet implemented and requires a trusted environment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - An authenticated user with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) - An authenticated user with UID 'user_abc' can read/update/delete their profile at /users/user_abc.
     * @deny (create) - An authenticated user with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @deny (get, update, delete) - An unauthenticated user cannot read/update/delete any user profile.
     * @principle Enforces document ownership; users can only manage their own profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure webhook responses. Publicly readable, writeable only by a privileged process.
     * @path /webhookResponses/{webhookResponseId}
     * @allow (get, list) - Any user (signed in or not) can read/list webhook responses.
     * @deny (create, update, delete) - No user can create/update/delete webhook responses through client-side rules.
     * @principle Allows public read access for monitoring purposes; write access is restricted (TODO: Implement backend write access).
     */
    match /webhookResponses/{webhookResponseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add backend validation for secure creation and updates.
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}