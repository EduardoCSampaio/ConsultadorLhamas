/**
 * @file Firebase Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to webhook responses while restricting write access to owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with userId matching the Firebase Auth UID.
 * - /webhookResponses/{webhookResponseId}: Stores webhook response data; publicly readable,
 *   but creates, updates, and deletes are only allowed by the owner (creator).
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Webhook responses are publicly readable but owner-only writeable.
 *
 * Denormalization for Authorization:
 * - For webhookResponses, the creator's user ID is stored directly within the document
 * to allow for easy validation of ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Only authenticated users can access their own user profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) If the user is creating their own profile (auth.uid == userId).
     * @allow (get, list, update, delete) If the user is the owner of the profile (auth.uid == userId).
     * @deny (create) If the user is not authenticated.
     * @deny (get, list, update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disabling user listing for privacy.
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Allows public read access to webhook responses but restricts write access to the creator.
     * @path /databases/{database}/documents/webhookResponses/{webhookResponseId}
     * @allow (get, list) Any user can read webhook responses.
     * @allow (create) Only the owner can create a webhook response, and the authorId must match the request.auth.uid.
     * @allow (update, delete) Only the owner can update/delete webhook responses.
     * @deny (create) If the authorId does not match the request.auth.uid.
     * @deny (update, delete) If the user is not the owner of the webhook response.
     * @principle Public read access with owner-only writes.
     */
    match /webhookResponses/{webhookResponseId} {
        allow get, list: if true;

        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}