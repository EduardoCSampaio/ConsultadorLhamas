/**
 * @file Firebase Security Rules for the application.
 *
 * @core_philosophy This ruleset employs a combination of ownership-based and role-based access control.
 *  - Users can only manage their own profiles and data under their user ID.
 *  - Team data is managed by designated managers, with sector-specific permissions.
 *  - Public read access is granted only where explicitly intended (e.g., top-level data with owner validation).
 *  - Super admins have full read and write access to any document.
 *
 * @data_structure
 *  - /users/{userId}: Stores user profiles, secured by ownership.
 *  - /teams/{teamId}: Stores team information, managed by team managers.
 *  - /activityLogs/{logId}: Stores activity logs, publicly readable.
 *  - /batches/{batchId}: Stores batch job status, publicly readable.
 *  - /cltConsents/{consentId}: Stores CLT consent data.
 *  - /tickets/{ticketId}: Stores support tickets, secured by ownership.
 *  - /tickets/{ticketId}/messages/{messageId}: Stores ticket messages, secured by parent ticket ownership.
 *  - /users/{userId}/notifications/{notificationId}: Stores user notifications, secured by ownership.
 *
 * @key_security_decisions
 *  - Listing users is denied to prevent information disclosure.
 *  - All write operations require authentication.
 *  - Data validation is minimized in this prototyping phase, focusing on relational integrity and ownership.
 *  - Super admins have full access.
 *
 * @denormalization_for_authorization
 *  - Team data includes a 'managerId' field to simplify authorization for team management.
 *  - User profiles include 'role' and 'teamId' fields for role-based and team-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @details Combines ownership and existence check for destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is a super admin.
     */
    function isSuperAdmin() {
      return isSignedIn() && (request.auth.token.super_admin == true);
    }

    /**
     * @description Checks if the authenticated user is a manager of the specified team.
     */
    function isTeamManager(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is a member of the specified team.
     */
    function isTeamMember(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid] != null;
    }

    /**
     * @description Allows only super admins to perform write operations.
     */
    function onlySuperAdmin() {
        return isSuperAdmin();
    }


    /**
     * @description Rules for API responses stored in /webhookResponses/{responseId}.
     * @path /webhookResponses/{responseId}
     * @allow (read) Authenticated user can read any webhook response
     * @deny (delete) Any user cannot delete any webhook response
     * @principle Allows any authenticated user to read any webhook response, but restricts modifications
     */
    match /webhookResponses/{responseId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if onlySuperAdmin();
      allow update: if onlySuperAdmin() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Rules for user profiles stored in /users/{userId}.
     * @path /users/{userId}
     * @allow (create) User can create their own profile.
     * @allow (get) User can read their own profile.
     * @deny (update) User cannot update someone else's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isSuperAdmin();
      allow list: if false;
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId) || isSuperAdmin();
      allow delete: if false;
    }

    /**
     * @description Rules for team data stored in /teams/{teamId}.
     * @path /teams/{teamId}
     * @allow (create) Only a super admin can create a team.
     * @allow (update) Only the team's manager can update the team.
     * @deny (delete) No one can delete a team
     * @principle Role-based access control for teams.
     */
    match /teams/{teamId} {
        allow get: if isTeamMember(teamId) || isSuperAdmin();
        allow list: if isSuperAdmin();
        allow create: if isSuperAdmin();
        allow update: if isTeamManager(teamId) || isSuperAdmin() && resource != null;
        allow delete: if false;
    }

    /**
     * @description Rules for activity logs stored in /activityLogs/{logId}.
     * @path /activityLogs/{logId}
     * @allow (get) Authenticated user can read any activity log.
     * @deny (create) No one can create activity logs directly.
     * @principle Public read access for activity logs.
     */
    match /activityLogs/{logId} {
      allow get: if isSignedIn() || isSuperAdmin();
      allow list: if isSignedIn() || isSuperAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for batch jobs stored in /batches/{batchId}.
     * @path /batches/{batchId}
     * @allow (get) Authenticated user can read any batch job.
     * @deny (create) No one can create batch jobs directly.
     * @principle Public read access for batch jobs.
     */
    match /batches/{batchId} {
      allow get: if isSignedIn() || isSuperAdmin();
      allow list: if isSignedIn() || isSuperAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for CLT consent data stored in /cltConsents/{consentId}.
     * @path /cltConsents/{consentId}
     * @allow (create) Authenticated users can create CLT consents.
     * @allow (get) Authenticated users can read CLT consents.
     * @deny (delete) No one can delete a CLT consent.
     * @principle Allows creation and read access for authenticated users.
     */
    match /cltConsents/{consentId} {
      allow get: if isSignedIn() || isSuperAdmin();
      allow list: if isSignedIn() || isSuperAdmin();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for support tickets stored in /tickets/{ticketId}.
     * @path /tickets/{ticketId}
     * @allow (create) User can create their own ticket.
     * @allow (get) User can read their own ticket.
     * @deny (update) User cannot update someone else's ticket.
     * @principle Enforces document ownership for support tickets.
     */
    match /tickets/{ticketId} {
      allow get: if isSignedIn() || isSuperAdmin();
      allow list: if isSignedIn() || isSuperAdmin();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for messages within a support ticket stored in /tickets/{ticketId}/messages/{messageId}.
     * @path /tickets/{ticketId}/messages/{messageId}
     * @allow (create) User can create a message in their own ticket.
     * @allow (get) User can read messages in their own ticket.
     * @deny (update) User cannot update messages.
     * @principle Enforces document ownership for ticket messages based on the parent ticket.
     */
    match /tickets/{ticketId}/messages/{messageId} {
      allow get: if isSignedIn() || isSuperAdmin();
      allow list: if isSignedIn() || isSuperAdmin();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for notifications for a specific user stored in /users/{userId}/notifications/{notificationId}.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User can create notifications for themselves.
     * @allow (get) User can read their own notifications.
     * @deny (update) User cannot update notifications.
     * @principle Enforces document ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId) || isSuperAdmin();
      allow list: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }
  }
}