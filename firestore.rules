/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a user-ownership model with role-based access control for administrative functions.
 * It also incorporates team-based access control for specific data entities.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the owning user or administrators.
 * - /teams/{teamId}: Stores team data. Access is restricted to team managers and administrators.
 * - /activityLogs/{logId}: Logs user activity for auditing. Write-only, restricted to authenticated users.
 * - /batches/{batchId}: Stores batch processing job status. Write-only, restricted to authenticated users.
 * - /cltConsents/{consentId}: Stores CLT consent data.
 * - /tickets/{ticketId}: Stores support tickets. Access restricted to ticket owner and admins.
 * - /tickets/{ticketId}/messages/{messageId}: Stores messages within a ticket. Access based on ticket access.
 * - /webhookResponses/{responseId}: Stores responses from webhooks/APIs.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a user. Access restricted to the owning user.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect user privacy.
 * - The 'super_admin' role grants full read/write access to all data.
 * - The 'manager' role can manage teams.
 * - Data validation is relaxed in this prototyping phase to allow schema flexibility, except for critical
 *   fields related to authorization and relational integrity.
 * - Denormalization for Authorization: No denormalization needed in this iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is the owner of the resource, and the resource exists.
      * @param {string} userId - The user ID to compare against the resource's userId.
      * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
     /**
      * @description Checks if the current user has the 'super_admin' role.
      * @returns {boolean} True if the user has the 'super_admin' role, false otherwise.
      */
    function isSuperAdmin() {
        return isSignedIn() && (request.auth.token.super_admin == true);
    }
      /**
       * @description Checks if the current user has the 'admin' role.
       * @returns {boolean} True if the user has the 'admin' role, false otherwise.
       */
    function isAdmin() {
         return isSignedIn() && (request.auth.token.admin == true || request.auth.token.super_admin == true);
    }

    /**
     * @description Rule for the /webhookResponses collection.
     * @path /webhookResponses/{responseId}
     * @allow (create) Signed-in users can create webhook responses.
     * @deny (create) Unauthenticated users cannot create webhook responses.
     * @allow (get, list) Anyone can read webhook responses.
     * @deny (update, delete) Only super admins can update or delete webhook responses.
     * @principle Public Read with Restricted Writes
     */
    match /webhookResponses/{responseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSuperAdmin();
    }

    /**
     * @description Rule for the /users collection.
     * @path /users/{userId}
     * @allow (create) Users can create their own profile.
     * @deny (create) Users cannot create profiles for other users.
     * @allow (get) Users can read their own profile.
     * @deny (get) Users cannot read other user profiles.
     * @allow (list) Listing users is not allowed.
     * @deny (update, delete) Only the user or super admins can update or delete their profile.
     * @principle Enforces user ownership for profile data and limits listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isSuperAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId) || isSuperAdmin();
    }

     /**
      * @description Rule for the /teams collection.
      * @path /teams/{teamId}
      * @allow (create) Managers can create teams.
      * @deny (create) Non-managers cannot create teams.
      * @allow (get) Managers and Super Admins can read team details.
      * @deny (get) Regular users cannot read team details.
      * @allow (list) Listing teams is disallowed.
      * @deny (update, delete) Only the team manager or super admins can update or delete a team.
      * @principle Enforces team management by designated managers and prohibits unauthorized access.
      */
    match /teams/{teamId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource.data.managerId == request.auth.uid;
    }

    /**
     * @description Rule for the /activityLogs collection.
     * @path /activityLogs/{logId}
     * @allow (create) Signed-in users can create activity logs.
     * @deny (create) Unauthenticated users cannot create activity logs.
     * @allow (get, list, update, delete) No one can get, list, update, or delete activity logs.
     * @principle Write-Only collection for auditing.
     */
    match /activityLogs/{logId} {
      allow get, list, update, delete: if false;
      allow create: if isSignedIn();
    }

    /**
     * @description Rule for the /batches collection.
     * @path /batches/{batchId}
     * @allow (create) Signed-in users can create batch jobs.
     * @deny (create) Unauthenticated users cannot create batch jobs.
     * @allow (get, list, update, delete) No one can get, list, update, or delete batch jobs.
     * @principle Write-Only collection for batch job tracking.
     */
    match /batches/{batchId} {
      allow get, list, update, delete: if false;
      allow create: if isSignedIn();
    }

    /**
     * @description Rule for the /cltConsents collection.
     * @path /cltConsents/{consentId}
     * @allow (create) Signed-in users can create CLT consents.
     * @deny (create) Unauthenticated users cannot create CLT consents.
     * @allow (get, list) Anyone can read CLT consents.
     * @deny (update, delete) Only super admins can update or delete CLT consents.
     * @principle Public Read with Restricted Writes
     */
    match /cltConsents/{consentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSuperAdmin();
    }

    /**
     * @description Rule for the /tickets collection.
     * @path /tickets/{ticketId}
     * @allow (create) Signed-in users can create tickets.
     * @deny (create) Unauthenticated users cannot create tickets.
     * @allow (get) Users can read their own tickets; admins can read all tickets.
     * @deny (get) Users cannot read other users' tickets.
     * @allow (list) Listing tickets is not allowed.
     * @deny (update, delete) Only the ticket owner or super admins can update or delete a ticket.
     * @principle Enforces user ownership for tickets with admin override.
     */
    match /tickets/{ticketId} {
      allow get: if isOwner(resource.data.userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn();
      allow update, delete: if isExistingOwner(resource.data.userId) || isAdmin();
    }

    /**
     * @description Rule for the /tickets/{ticketId}/messages collection.
     * @path /tickets/{ticketId}/messages/{messageId}
     * @allow (create) Signed-in users can create messages in a ticket they own.
     * @deny (create) Unauthenticated users cannot create messages.
     * @allow (get) Users can read messages in a ticket they own; admins can read all messages.
     * @deny (get) Users cannot read messages in other users' tickets.
     * @allow (list) Listing messages is not allowed.
     * @deny (update, delete) No one can update or delete messages.
     * @principle Enforces access control based on the parent ticket's ownership.
     */
    match /tickets/{ticketId}/messages/{messageId} {
      allow get: if get(/databases/$(database)/documents/tickets/$(ticketId)).data.userId == request.auth.uid || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/tickets/$(ticketId)).data.userId == request.auth.uid || isAdmin();
      allow update, delete: if false;
    }

    /**
     * @description Rule for the /users/{userId}/notifications collection.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) Creating notifications is not allowed directly via client.
     * @deny (create) No one can create notifications.
     * @allow (get) Users can read their own notifications.
     * @deny (get) Users cannot read other users' notifications.
     * @allow (list) Users can list their own notifications.
     * @deny (update, delete) Only the owner or super admins can update or delete their notifications.
     * @principle Enforces user ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if false;
      allow update, delete: if isExistingOwner(userId);
    }
  }
}