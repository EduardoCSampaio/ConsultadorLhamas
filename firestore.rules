/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access but owner-only write access to webhook responses.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The `userId` MUST match the
 *   Firebase Auth UID.
 * - /webhookResponses/{webhookResponseId}: Stores webhook responses.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Webhook responses are publicly readable, but only the owner can modify them.
 *   This assumes that the `WebhookResponse` schema will contain an `ownerId` field.
 *
 * Denormalization for Authorization:
 *  - The `UserProfile` includes the `uid` field which is used to match with request.auth.uid for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /databases/{database}/documents/users
     * @allow None - Listing users is not permitted.
     * @deny (list) - Attempting to list all users.
     * @principle Prevents unauthorized access to user data.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Manages access to individual user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) - Authenticated user reading their own profile.
     * @allow (create) - Authenticated user creating their own profile, where userId matches auth.uid.
     * @allow (update) - Authenticated user updating their own profile, where userId matches auth.uid.
     * @allow (delete) - Authenticated user deleting their own profile, where userId matches auth.uid.
     * @deny (get) - Any user trying to read another user's profile.
     * @deny (create) - User attempting to create a profile with a userId that doesn't match their auth.uid.
     * @deny (update) - User attempting to update another user's profile.
     * @deny (delete) - User attempting to delete another user's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);

    }


    /**
     * @description Manages access to webhook responses.
     * @path /databases/{database}/documents/webhookResponses/{webhookResponseId}
     * @allow (get, list) - Any user can read or list webhook responses.
     * @allow (create) - Only the owner can create a webhook response, validated by authorId.
     * @allow (update, delete) - Only the owner can modify/delete a webhook response, validated by authorId.
     * @deny (create) - If the incoming authorId does not match the user's auth UID.
     * @deny (update, delete) - If the user is not the owner (authorId does not match) or the document does not exist.
     * @principle Public read with owner-only writes, enforcing document ownership for mutations.
     */
    match /webhookResponses/{webhookResponseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.id == webhookResponseId; // TODO:  && request.resource.data.authorId == request.auth.uid
      allow update: if isSignedIn() && isExistingWebhookResponseOwner(webhookResponseId) && request.resource.data.id == resource.data.id; // TODO:  && isOwner(resource.data.authorId)
      allow delete: if isSignedIn() && isExistingWebhookResponseOwner(webhookResponseId); // TODO: isOwner(resource.data.authorId)
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
      
    function isExistingWebhookResponseOwner(webhookResponseId) {
        // TODO: Update this validation with authorId after its implementation
        return resource != null && request.auth.uid != null && resource.data.id == webhookResponseId;
    }
  }
}