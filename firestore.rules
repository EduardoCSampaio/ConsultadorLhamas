rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Regras para a coleção de usuários
    match /users/{userId} {
      // Permite que um admin leia qualquer perfil, e um usuário leia o seu próprio.
      allow get: if request.auth.token.admin == true || request.auth.uid == userId;
      
      // Permite que um gerente liste os usuários que pertencem ao seu time.
      allow list: if request.auth.token.admin == true ||
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager' &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == request.query.where[0][2]);

      // Permite que admins atualizem qualquer perfil.
      // Permite que um usuário atualize seu próprio perfil.
      // Permite que um gerente atualize o perfil de um membro de sua equipe.
      allow update: if request.auth.token.admin == true || request.auth.uid == userId ||
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager' &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == resource.data.teamId);

      // Qualquer usuário autenticado pode criar seu perfil.
      allow create: if request.auth.uid != null;

      // Apenas admins podem deletar usuários.
      allow delete: if request.auth.token.admin == true;

      // Regras para a sub-coleção de notificações
      match /notifications/{notificationId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }

    // Regra para a coleção de equipes
    match /teams/{teamId} {
      // Gerentes podem ler e escrever nos dados de sua própria equipe.
      allow read, write: if request.auth.uid == resource.data.managerId;
    }
    
    // Regra para a coleção de respostas de webhook
    match /webhookResponses/{responseId} {
      // Permitir leitura e escrita abertas por enquanto para o webhook funcionar
      allow read, write: if true; 
    }

    // Regra para a coleção de lotes
    match /batches/{batchId} {
       allow read, write, delete: if request.auth.uid == resource.data.userId;
    }
    
    // Regra para a coleção de logs de atividade
    match /activityLogs/{logId} {
      // Apenas admins podem ler/listar logs.
      allow read: if request.auth.token.admin == true;
      // A criação é feita via server-actions, então não precisa de regra de cliente.
      allow write: if false; 
    }
    
    // Regra para a coleção de tickets de suporte
    match /tickets/{ticketId} {
      // Admins podem ler qualquer ticket. Usuários podem ler seus próprios tickets.
      allow read, update: if request.auth.token.admin == true || request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null;
      
      // Regras para a sub-coleção de mensagens
      match /messages/{messageId} {
        // Admins e o dono do ticket podem ler e criar mensagens.
        allow read, create: if request.auth.token.admin == true || request.auth.uid == get(/databases/$(database)/documents/tickets/$(ticketId)).data.userId;
      }
    }
    
    // Regra para a coleção interna de contadores
    match /internal/{docId} {
      // Apenas o backend (admin) pode escrever. Ninguém pode ler.
      allow read, write: if request.auth.token.admin == true;
    }
  }
}
