/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset implements a role-based access control system with user-owned profiles and public read access to webhook responses.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  The `userId` MUST match the Firebase Auth UID.
 * - /webhookResponses/{webhookResponseId}: Stores responses from webhooks. These are publicly readable but only writable by authorized users.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the corresponding authenticated user.
 * - Webhook responses are publicly readable, but creation, update, and deletion are restricted (see TODO).
 * - Listing of users is explicitly denied to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - User profiles use the Firebase Auth UID as the document ID to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' reads/updates/deletes profile at /users/user123.
     * @deny (create) User with UID 'user456' attempts to create profile at /users/user123.
     * @deny (get, update, delete) User with UID 'user456' attempts to read/update/delete profile at /users/user123.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures webhook responses, allowing public read access but restricting write access.
     * @path /webhookResponses/{webhookResponseId}
     * @allow (get, list) Any user can read webhook responses.
     * @deny (create, update, delete) All users are denied write access.
     * @principle Allows public read access but restricts write access.
     */
    match /webhookResponses/{webhookResponseId} {
      allow get, list: if true; // Public read access

      // CRITICAL: Cannot implement owner-only writes. The 'WebhookResponse' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}