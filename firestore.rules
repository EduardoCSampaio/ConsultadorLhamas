
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Função auxiliar para verificar se o usuário é o dono do recurso
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Função auxiliar para verificar se o usuário tem a role 'admin'
    // no seu documento da coleção /users.
    function isUserAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Usuários só podem ler e escrever seus próprios perfis.
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if request.auth != null;
    }
    
    // Admins podem ler todos os usuários.
    match /users/{userId} {
        allow list: if isUserAdmin();
    }

    // Logs de atividade: Admins podem ler tudo, usuários podem ler apenas os seus.
    match /activityLogs/{logId} {
        allow read: if isUserAdmin() || (isOwner(resource.data.userId));
        allow create: if request.auth != null;
    }

    // Lotes: Usuários só podem interagir com seus próprios lotes. Admins podem ver todos.
    match /batches/{batchId} {
        allow read, write, delete: if isUserAdmin() || isOwner(resource.data.userId);
        allow create: if request.auth != null;
    }
    
    // Webhook: Acesso liberado para escrita externa, mas restrito para leitura.
    match /webhookResponses/{responseId} {
        allow write: if true; // Aberto para a API externa escrever
        allow read: if isUserAdmin(); // Apenas admins podem ler as respostas
    }

    // Chamados (Tickets) e suas Mensagens
    match /tickets/{ticketId} {
      // Qualquer usuário autenticado pode criar um chamado.
      allow create: if request.auth != null;

      // Leitura e atualização: Permitido se for o dono do ticket OU se for admin.
      allow read, update: if isOwner(resource.data.userId) || isUserAdmin();

      // Mensagens dentro de um chamado
      match /messages/{messageId} {
        // Leitura e escrita: Permitido se o usuário tem permissão para ler o ticket pai.
        allow read, write: if (exists(/databases/$(database)/documents/tickets/$(ticketId)) && 
                              (isOwner(get(/databases/$(database)/documents/tickets/$(ticketId)).data.userId) || isUserAdmin()));
      }
    }
    
    // Contadores internos (como o de tickets) só podem ser acessados pelo backend.
    match /internal/{docId} {
        allow read, write: if false;
    }
  }
}
