/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization while permitting flexible data shapes to enable rapid prototyping.
 * It implements a strict user-ownership model for user profiles and allows public read access to webhook responses,
 * with restricted write access based on ownership.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` matches the Firebase Auth UID.
 * - Webhook responses are stored under `/webhookResponses/{webhookResponseId}`.
 *
 * Key Security Decisions:
 * - Listing of users is explicitly denied.
 * - Data type validation is skipped in favor of rapid iteration, except for fields directly involved in authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `UserProfile` document's `uid` field MUST match the document ID (`userId`) to ensure ownership.
 *
 * Structural Segregation:
 * - No separation of public/private content is needed in this data model, as the webhook responses are globally readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /databases/{database}/documents/users
     * @allow (get) - Allows getting an specific user if the user ID matches the authenticated user's ID.
     * @deny (list) - Denies listing all users. This is a security best practice.
     * @allow (create) - Allows creating a user profile if the user ID matches the authenticated user's ID.
     * @allow (update) - Allows updating a user profile if the user ID matches the authenticated user's ID.
     * @allow (delete) - Allows deleting a user profile if the user ID matches the authenticated user's ID.
     * @principle Prevents listing all user documents for privacy.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to webhook responses and restricts write access to owners.
     * @path /databases/{database}/documents/webhookResponses/{webhookResponseId}
     * @allow (get, list) - Allows any user to read webhook responses.
     * @deny (create, update, delete) - Write operations are disallowed (for now).
     * @principle Allows public read access with restricted write access.
     */
    match /webhookResponses/{webhookResponseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}