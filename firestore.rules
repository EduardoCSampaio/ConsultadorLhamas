/**
 * @fileoverview Firestore Security Rules for Beleza Integrada.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for teams and an ownership model for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /teams/{teamId}: Stores team data. Access is controlled by a 'members' map on each team document,
 *   where each key is a user ID and the value is the user's role within the team.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Team access is governed by roles defined in the 'members' map of the team document.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - Team membership is denormalized into the 'members' map on each team document, allowing security rules
 *   to quickly check a user's role without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User accessing their own profile.
     * @deny (get, create, update, delete) User trying to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to read their own profile.
      allow get: if isOwner(userId);

      // Only the user can list their own profile (no listing all users).
      allow list: if false;

      // Allow the user to create their own profile if the userId matches their auth UID.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow the user to update their own profile. Enforce immutability of the user ID.
      allow update: if isOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to team documents.
     * @path /teams/{teamId}
     * @allow (get, list) Any authenticated user can read a team document.
     * @allow (create) Any authenticated user can create a team document.
     * @allow (update, delete) Only team members with specific roles can update/delete the team.
     * @deny (create, update, delete) Unauthenticated users cannot create/update/delete teams.
     * @principle Enforces role-based access control for teams using a denormalized 'members' map.
     */
    match /teams/{teamId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is an admin of the team.
      function isAdmin() {
        return isSignedIn() && resource.data.members[request.auth.uid] == 'admin';
      }

      // Helper function to check if the user is a member of the team.
      function isMember() {
        return isSignedIn() && resource.data.members[request.auth.uid] != null;
      }

      // Allow any authenticated user to read team details.
      allow get: if isSignedIn();

      // Allow any authenticated user to list teams.
      allow list: if isSignedIn();

      // Allow any authenticated user to create a team.
      allow create: if isSignedIn();

      // Only team admins can update team details.
      allow update: if isAdmin();

      // Only team admins can delete a team.
      allow delete: if isAdmin();
    }
  }
}