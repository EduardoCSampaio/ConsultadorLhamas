{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile within the Beleza Integrada application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "Full name of the user."
        },
        "teamIds": {
          "type": "array",
          "description": "References to Teams. (Relationship: UserProfile N:N Team)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    },
    "Team": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Team",
      "type": "object",
      "description": "Represents a team within the Beleza Integrada application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the team."
        },
        "name": {
          "type": "string",
          "description": "Name of the team."
        },
        "description": {
          "type": "string",
          "description": "Description of the team."
        },
        "userProfileIds": {
          "type": "array",
          "description": "References to UserProfiles. (Relationship: Team N:N UserProfile)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Accessible only to the user themselves. Includes fields like email, name and teamIds (which doesn't directly affect authorization).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/teams/{teamId}",
        "definition": {
          "entityName": "Team",
          "schema": {
            "$ref": "#/backend/entities/Team"
          },
          "description": "Stores team information. Includes denormalized 'members' map for authorization independence. The 'members' map contains userId: role key-value pairs.",
          "params": [
            {
              "name": "teamId",
              "description": "The unique identifier of the team."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to address the 'Missing or insufficient permissions' error and ensure secure and scalable data access for the Beleza Integrada application. The core principle is Authorization Independence, achieved through denormalization, eliminating the need for `get()` calls in security rules. This allows for atomic operations (transactions/batches) and simplifies debugging. The structure employs structural segregation to ensure all documents within a collection share the same security requirements and utilizes access modeling for consistent authorization patterns.\n\nSpecifically, user profiles are stored under `/users/{userId}`, providing path-based ownership for private user data. Teams are stored in `/teams/{teamId}`, with a membership map denormalized within each team document to manage team member roles directly. This denormalization enables security rules to validate access based on the requesting user's presence in the team's `members` map without requiring additional `get()` calls.\n\nThe data structure also takes into account the N:N relationship between UserProfile and Team. The teamIds field in the UserProfile and userProfileIds field in the Team schema reflect this relationship. While these fields do not play a direct role in authorization, they allow for efficient querying and data retrieval based on team or user membership.\n\nThis design supports secure `list` operations (QAPs) as the security rules can directly evaluate a user's membership in a team based on the denormalized `members` map within each team document. The use of dedicated collections and denormalized authorization data makes the intent clear and enhances debuggability."
  }
}